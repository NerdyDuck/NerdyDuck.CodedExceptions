<?xml version="1.0" encoding="utf-8"?>
<topic id="2631cf6c-c929-4d9d-aa74-f3fbf0c01c2b" revisionNumber="1">
	<developerConceptualDocument
		xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
		xmlns:xlink="http://www.w3.org/1999/xlink">


		<introduction>
			<para>A short introduction to the idea of the project and its basic capabilities.</para>
		</introduction>

		<section address="Motivation">
			<title>Motivation</title>
			<content>
				<para>
					In any larger software project, clearly identifying errors is very important.
					It helps customer service representatives to communicate with customers seeking for help, or forwarding bugs to the developers.
					Using a knowledge-base to find help for a problem is much easier if you can use a unique identifier as a search pattern instead of a (possibly even localized) error message.
				</para>
				<para>
					Since .NET 1.0, the System.Exception class and its derived classes contained the HResult property to provide a unique error identifier.
					The framework uses it mainly for operating system related error codes. As it had no publicly accessible setter, and the exception classes had no public constructor that allowed setting HResult, it was of little use for a developer to identify the exceptions in his own code, unless you did it the hard way, by overwriting the property entirely.
					In .NET 4.5, things were improved, because Exception.HResult got a protected setter, which allowed developers to modify the property.
					Still, there are no public constructors to set the property, so developers are forced to create their own exceptions, which may mean a lot of work.
				</para>
				<para>
					To leverage the new behavior, and relieve the developer's burden, this project aims to provide a set of the most common exceptions, with constructors allowing to set the HResult value.
					In addition, it provides tools to create standardized error codes, and to discover if an exception is able to provide custom error codes.
				</para>
			</content>
		</section>

		<relatedTopics>
			<!-- One or more of the following:
					 - A local link
					 - An external link
					 - A code entity reference

			<link xlink:href="Other Topic's ID"/>
			<link xlink:href="Other Topic's ID">Link inner text</link>

			<externalLink>
					<linkText>Link text</linkText>
					<linkAlternateText>Optional alternate link text</linkAlternateText>
					<linkUri>URI</linkUri>
			</externalLink>

			<codeEntityReference>API member ID</codeEntityReference>

			Examples:

			<link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
			<link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

			<externalLink>
					<linkText>SHFB on GitHub</linkText>
					<linkAlternateText>Go to GitHub</linkAlternateText>
					<linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
			</externalLink>

			<codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
			<codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
			<codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
			<codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
			<codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
			<codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
			<codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
			-->
		</relatedTopics>
	</developerConceptualDocument>
</topic>
